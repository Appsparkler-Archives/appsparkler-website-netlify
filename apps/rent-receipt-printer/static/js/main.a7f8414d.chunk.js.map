{"version":3,"sources":["stories/elements/InputGroup/index.tsx","stories/RentReceiptForm/index.tsx","stories/logic/getRentReceiptInfo.ts","stories/RentReceipt/index.tsx","stories/atoms/Icon/index.tsx","stories/RentReceiptPrinterApp/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputGroup","inputProps","label","type","name","value","children","onChange","useState","$value","$evt","undefined","setState","handleChange","useCallback","evt","target","prevState","useEffect","className","id","InputGroupWithSelect","inputLabel","inputType","inputName","inputValue","selectProps","selectLabel","selectName","selectValue","options","$value1","$value2","$name","$name1","$name2","handleChange1","handleChange2","Boolean","map","InputGroupWithCheckbox","checkboxLabel","checkboxValue","checkboxName","checkboxProps","checked","htmlFor","TextAreaGroup","textareaProps","rows","oneToTwelve","times","n","x","RentReceiptForm","tenantName","fromDate","noOfMonths","rentAmount","includesMaintenance","address","landlordName","landlordPan","state","noValidate","required","RentReceiptFormWithValidation","validationMessages","handleOnClickPrint","formData","validateFormData","length","role","validationMessage","idx","RequiredValidationMessage","fieldsAndLabels","field","mappedFieldAndLabels","isRequiredErrors","filter","res","getRentReceiptInfo","fromDt","numberOfMonths","$fromDtStartOfDay","dt","moment","add","startOf","getFromDt","daysInMonth","month","format","toDt","subtract","parseInt","Strong","t","RentReceipt","amount","panNo","printOnly","pageBreakAfter","useMemo","receiptNumber","uuid","substr","wrapperClasses","trim","SVGIcon","xmlns","width","height","fill","viewBox","d","RentReceiptPrinterApp","rentReceiptsInfo","rentReceiptFormData","hasPrintFeature","window","print","onChangeData","parsedRentReceiptInfo","rentReceipts","rentReceiptInfo","rentReceiptProps","Number","toLocaleString","handleClickPrint","onClick","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7f8414d.chunk.js","sourcesContent":["import { map } from \"../../logic/lodash\";\nimport {\n  useState,\n  useEffect,\n  DetailedHTMLProps,\n  HTMLInputTypeAttribute,\n  InputHTMLAttributes,\n  useCallback,\n  ReactNode,\n  ChangeEventHandler,\n  ChangeEvent,\n  TextareaHTMLAttributes,\n  SelectHTMLAttributes,\n  useRef,\n  LegacyRef,\n} from \"react\";\nimport ReactDayPickerInput from \"react-day-picker/DayPickerInput\";\nimport RDPMomentUtils from \"react-day-picker/moment\";\nimport \"react-day-picker/lib/style.css\";\n\nexport type AllowedInputTypes = Exclude<\n  HTMLInputTypeAttribute,\n  | \"button\"\n  | \"checkbox\"\n  | \"radio\"\n  | \"color\"\n  | \"file\"\n  | \"hidden\"\n  | \"image\"\n  | \"range\"\n  | \"reset\"\n  | \"submit\"\n>;\n\nexport type CustomChangeEventHandler<HTMLElement = HTMLInputElement> = (\n  name: string,\n  value: string | boolean,\n  evt?: ChangeEvent<HTMLElement>\n) => void;\n\nexport interface IInputGroupProps {\n  label: string;\n  value?: string;\n  type?: AllowedInputTypes;\n  children?: ReactNode;\n  name: string;\n  inputProps?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  onChange?: CustomChangeEventHandler;\n}\n\nexport const InputGroup = ({\n  inputProps,\n  label,\n  type,\n  name,\n  value,\n  children,\n  onChange,\n}: IInputGroupProps) => {\n  const [{ $value, $evt }, setState] = useState<{\n    $value?: string;\n    $evt?: ChangeEvent<HTMLInputElement>;\n  }>({\n    $value: value,\n    $evt: undefined,\n  });\n  const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (evt) => {\n      const {\n        target: { value },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value: value,\n          $evt: evt,\n        }));\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (typeof $value === \"string\" && typeof onChange === \"function\") {\n      onChange(name, $value, $evt);\n    }\n  }, [$value, onChange, $evt, name]);\n\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {label}\n      </span>\n      <input\n        type={type}\n        name={name}\n        className=\"form-control\"\n        value={$value}\n        onChange={handleChange}\n        {...inputProps}\n      />\n      {children}\n    </div>\n  );\n};\n\nexport interface IDoubleInputGroupProps {\n  label1: string;\n  value1?: string;\n  type1?: AllowedInputTypes;\n  name1?: string;\n  inputProps1?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n\n  label2: string;\n  value2?: string;\n  type2?: AllowedInputTypes;\n  name2?: string;\n  inputProps2?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n\n  onChange?: CustomChangeEventHandler;\n}\n\nexport const DoubleInputGroup = ({\n  inputProps1,\n  label1,\n  type1,\n  name1,\n  value1,\n  inputProps2,\n  label2,\n  type2,\n  name2,\n  value2,\n  onChange,\n}: IDoubleInputGroupProps) => {\n  const [\n    { $value1, $value2, $value, $evt, $name, $name1, $name2 },\n    setState,\n  ] = useState<{\n    $value1?: string;\n    $value2?: string;\n    $value: string;\n    $name1?: string;\n    $name2?: string;\n    $name: string;\n    $evt?: ChangeEvent<HTMLInputElement>;\n  }>({\n    $value1: value1,\n    $value2: value2,\n    $value: \"\",\n    $evt: undefined,\n    $name: \"\",\n    $name1: name1,\n    $name2: name2,\n  });\n\n  const handleChange1 = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (evt) => {\n      const {\n        target: { value, name },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value1: value,\n          $value: value,\n          $name1: name,\n          $name: name,\n          $evt: evt,\n        }));\n      }\n    },\n    []\n  );\n\n  const handleChange2 = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (evt) => {\n      const {\n        target: { value, name },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value2: value,\n          $value: value,\n          $name2: name,\n          $name: name,\n          $evt: evt,\n        }));\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (Boolean($value) && typeof onChange === \"function\" && Boolean($name)) {\n      onChange($name, $value, $evt);\n    }\n  }, [$value, onChange, $evt, $name]);\n\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      {/* INPUT 1 */}\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {label1}\n      </span>\n      <input\n        type={type1}\n        name={$name1}\n        className=\"form-control\"\n        value={$value1}\n        onChange={handleChange1}\n        {...inputProps1}\n      />\n      {/* INPUT 2 */}\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {label2}\n      </span>\n      <input\n        type={type2}\n        name={$name2}\n        className=\"form-control\"\n        value={$value2}\n        onChange={handleChange2}\n        {...inputProps2}\n      />\n    </div>\n  );\n};\n\nexport type OptionType = { label: string | number; value: string | number };\n\nexport interface IInputGroupWithSelect {\n  inputLabel: string;\n  inputValue?: string;\n  inputType?: AllowedInputTypes;\n  inputName?: string;\n  inputProps?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n\n  selectLabel: string;\n  selectValue?: string;\n  selectName?: string;\n  selectProps?: DetailedHTMLProps<\n    SelectHTMLAttributes<HTMLSelectElement>,\n    HTMLSelectElement\n  >;\n  options: OptionType[];\n\n  onChange?: CustomChangeEventHandler<HTMLInputElement | HTMLSelectElement>;\n}\n\nexport const InputGroupWithSelect = ({\n  inputProps,\n  inputLabel,\n  inputType,\n  inputName,\n  inputValue,\n  selectProps,\n  selectLabel,\n  selectName,\n  selectValue,\n  options = [],\n  onChange,\n}: IInputGroupWithSelect) => {\n  const [\n    { $value1, $value2, $value, $evt, $name, $name1, $name2 },\n    setState,\n  ] = useState<{\n    $value1?: string;\n    $value2?: string;\n    $value: string;\n    $name1?: string;\n    $name2?: string;\n    $name: string;\n    $evt?: ChangeEvent<HTMLSelectElement | HTMLInputElement>;\n  }>({\n    $value1: inputValue,\n    $value2: selectValue,\n    $value: \"\",\n    $evt: undefined,\n    $name: \"\",\n    $name1: inputName,\n    $name2: selectName,\n  });\n\n  const handleChange1 = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (evt) => {\n      const {\n        target: { value, name },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value1: value,\n          $value: value,\n          $name1: name,\n          $name: name,\n          $evt: evt as ChangeEvent<HTMLInputElement>,\n        }));\n      }\n    },\n    []\n  );\n\n  const handleChange2 = useCallback<ChangeEventHandler<HTMLSelectElement>>(\n    (evt) => {\n      const {\n        target: { value, name },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value2: value,\n          $value: value,\n          $name2: name,\n          $name: name,\n          $evt: evt as ChangeEvent<HTMLSelectElement>,\n        }));\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (Boolean($value) && typeof onChange === \"function\" && Boolean($name)) {\n      onChange($name, $value, $evt);\n    }\n  }, [$value, onChange, $evt, $name]);\n\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      {/* INPUT 1 */}\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {inputLabel}\n      </span>\n      <input\n        type={inputType}\n        name={$name1}\n        className=\"form-control\"\n        value={$value1}\n        onChange={handleChange1}\n        {...inputProps}\n      />\n      {/* INPUT 2 */}\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {selectLabel}\n      </span>\n      <select\n        name={$name2}\n        className=\"form-control\"\n        value={$value2}\n        onChange={handleChange2}\n        {...selectProps}\n      >\n        {map<OptionType, ReactNode>(\n          ({ label, value }) => (\n            <option key={value} value={value}>\n              {label}\n            </option>\n          ),\n          options\n        )}\n      </select>\n    </div>\n  );\n};\n\nexport interface IInputGroupWithCheckbox {\n  // Input\n  inputLabel: string;\n  checkboxLabel?: string;\n  inputValue?: string;\n  inputName: string;\n  inputProps?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  // Checkbox\n  checkboxName: string;\n  checkboxValue?: boolean;\n  checkboxProps?: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  onChange?: CustomChangeEventHandler;\n}\n\nexport const InputGroupWithCheckbox = ({\n  checkboxLabel,\n  checkboxValue,\n  checkboxName,\n  inputName,\n  inputValue,\n  inputLabel,\n  inputProps,\n  checkboxProps,\n  onChange,\n}: IInputGroupWithCheckbox) => {\n  const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (evt) => {\n      const {\n        target: { checked },\n      } = evt;\n      if (typeof onChange === \"function\") {\n        onChange(checkboxName, checked, evt);\n      }\n    },\n    [checkboxName, onChange]\n  );\n  return (\n    <InputGroup\n      type=\"text\"\n      name={inputName}\n      label={inputLabel}\n      value={inputValue}\n      onChange={onChange}\n      inputProps={inputProps}\n    >\n      <div className=\"form-check mx-2\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          name={checkboxName}\n          checked={checkboxValue}\n          onChange={handleChange}\n          {...checkboxProps}\n        />\n        <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\n          {checkboxLabel}\n        </label>\n      </div>\n    </InputGroup>\n  );\n};\n\nexport interface ITextareaGroupProps {\n  label: string;\n  name: string;\n  textareaProps?: DetailedHTMLProps<\n    TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >;\n  rows?: number;\n  value?: string;\n  onChange?: CustomChangeEventHandler<HTMLTextAreaElement>;\n}\n\nexport const TextAreaGroup = ({\n  textareaProps,\n  label,\n  name,\n  value,\n  rows = 3,\n  onChange,\n}: ITextareaGroupProps) => {\n  const [{ $value, $evt }, setState] = useState<{\n    $value?: string;\n    $evt?: ChangeEvent<HTMLTextAreaElement>;\n  }>({\n    $value: value,\n    $evt: undefined,\n  });\n  const handleChange = useCallback<ChangeEventHandler<HTMLTextAreaElement>>(\n    (evt) => {\n      const {\n        target: { value },\n      } = evt;\n      if (typeof value === \"string\") {\n        setState((prevState) => ({\n          ...prevState,\n          $value: value,\n          $evt: evt,\n        }));\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (typeof $value === \"string\" && typeof onChange === \"function\") {\n      onChange(name, $value, $evt);\n    }\n  }, [$value, onChange, $evt, name]);\n\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        {label}\n      </span>\n      <textarea\n        name={name}\n        className=\"form-control\"\n        value={$value}\n        onChange={handleChange}\n        rows={rows}\n        {...textareaProps}\n      />\n    </div>\n  );\n};\n\nexport interface IDayPickerInputProps {}\n\nexport const DayPickerInput = (props: IDayPickerInputProps) => {\n  const ref: LegacyRef<ReactDayPickerInput> = useRef(null);\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n        From Date\n      </span>\n      <ReactDayPickerInput\n        inputProps={{\n          className: \"form-control\",\n        }}\n        onDayChange={console.log}\n        formatDate={RDPMomentUtils.formatDate}\n        parseDate={RDPMomentUtils.parseDate}\n        format=\"DD/MM/YYYY\"\n        placeholder=\"dd/mm/yyyy\"\n        ref={ref}\n      />\n      <button\n        onClick={() => ref.current?.showDayPicker()}\n        className=\"btn btn-secondary\"\n        aria-label=\"Show From Date Picker\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          className=\"bi bi-calendar-fill\"\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V5h16V4H0V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z\" />\n        </svg>\n      </button>\n    </div>\n  );\n};\n","import React, { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport {\n  InputGroup,\n  InputGroupWithCheckbox,\n  InputGroupWithSelect,\n  OptionType,\n  TextAreaGroup,\n} from \"../elements/InputGroup\";\nimport { filter, map, times } from \"../logic/lodash\";\n\nexport interface ReceiptFormData {\n  tenantName: string;\n  fromDate: string;\n  noOfMonths: string;\n  rentAmount: string;\n  includesMaintenance: boolean;\n  address: string;\n  landlordName: string;\n  landlordPan: string;\n}\n\nexport interface IRentReceiptForm {\n  onChange: (formData: ReceiptFormData) => void;\n}\n\nconst oneToTwelve: OptionType[] = times<OptionType>(\n  (n, x = n + 1) => ({\n    label: x,\n    value: x,\n  }),\n  12\n);\n\nexport const RentReceiptForm = ({ onChange }: IRentReceiptForm) => {\n  const [state, setState] = useState<ReceiptFormData>({\n    tenantName: \"\",\n    fromDate: \"\",\n    noOfMonths: \"12\",\n    rentAmount: \"\",\n    includesMaintenance: false,\n    address: \"\",\n    landlordName: \"\",\n    landlordPan: \"\",\n  });\n\n  const {\n    tenantName,\n    fromDate,\n    noOfMonths,\n    rentAmount,\n    includesMaintenance,\n    address,\n    landlordName,\n    landlordPan,\n  } = state;\n\n  const handleChange = useCallback((name: string, value: string | boolean) => {\n    if (name) {\n      setState((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n    }\n  }, []);\n\n  useEffect(() => {\n    onChange(state);\n  }, [state, onChange]);\n\n  return (\n    <div>\n      <h3 className=\"text-center h3\">Rent Receipt Printer</h3>\n      <form noValidate>\n        <InputGroup\n          type=\"text\"\n          label=\"Tenant's Name\"\n          name=\"tenantName\"\n          value={tenantName}\n          onChange={handleChange}\n          inputProps={{\n            required: true,\n            \"aria-label\": \"Tenant's Name\",\n          }}\n        />\n\n        <InputGroupWithSelect\n          inputLabel=\"From\"\n          inputName=\"fromDate\"\n          inputValue={fromDate}\n          inputType=\"date\"\n          options={oneToTwelve}\n          selectLabel=\"# of months\"\n          selectName=\"noOfMonths\"\n          inputProps={{\n            \"aria-label\": \"Type in From Date\",\n          }}\n          selectValue={noOfMonths}\n          onChange={handleChange}\n        />\n\n        {/* Amount & includes-maintenance-checkbox */}\n        <InputGroupWithCheckbox\n          inputProps={{ type: \"number\" }}\n          inputLabel=\"Amount\"\n          inputName=\"rentAmount\"\n          inputValue={rentAmount}\n          checkboxLabel=\"Includes Maintenance\"\n          checkboxName=\"includesMaintenance\"\n          checkboxValue={includesMaintenance}\n          onChange={handleChange}\n        />\n\n        <TextAreaGroup\n          label=\"Address\"\n          name=\"address\"\n          onChange={handleChange}\n          value={address}\n          rows={5}\n        />\n\n        <InputGroup\n          type=\"text\"\n          label=\"Landlord's Name\"\n          name=\"landlordName\"\n          value={landlordName}\n          onChange={handleChange}\n        />\n        <InputGroup\n          type=\"text\"\n          label=\"Landlord's PAN #\"\n          name=\"landlordPan\"\n          value={landlordPan}\n          onChange={handleChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport const RentReceiptFormWithValidation = ({\n  onChange,\n}: IRentReceiptForm) => {\n  const [{ validationMessages }, setState] = useState<{\n    validationMessages: ReactNode[];\n  }>({\n    validationMessages: [],\n  });\n  const handleOnClickPrint = useCallback(\n    (formData: ReceiptFormData) => {\n      const validationMessages = validateFormData(formData);\n      setState((prevState) => ({\n        ...prevState,\n        validationMessages,\n      }));\n      if (validationMessages.length === 0) onChange(formData);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className=\"d-print-none\">\n      <RentReceiptForm onChange={handleOnClickPrint} />\n      {validationMessages.length > 0 && (\n        <div className=\"alert alert-warning show my-2 p-0\" role=\"alert\">\n          <ul>\n            {validationMessages.map((validationMessage, idx) => (\n              <li className=\"p-0 m-0\" key={`validaiton-messages-${idx}`}>\n                {validationMessage}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RequiredValidationMessage = ({ label }: { label: string }) => (\n  <>\n    <strong>{label}</strong> is required\n  </>\n);\n\nconst validateFormData = ({\n  tenantName,\n  rentAmount,\n  address,\n  landlordName,\n  landlordPan,\n  fromDate,\n}: ReceiptFormData): ReactNode[] => {\n  const fieldsAndLabels = [\n    { label: \"Address\", field: address },\n    { label: \"Rent Amount\", field: rentAmount },\n    { label: \"Tenant's Name\", field: tenantName },\n    { label: \"From Date\", field: fromDate },\n    { label: \"Landlord's Name\", field: landlordName },\n    { label: \"Landlord's PAN#\", field: landlordPan },\n  ];\n\n  const mappedFieldAndLabels = map(\n    ({ label, field }) =>\n      Boolean(field) ? (\n        false\n      ) : (\n        <RequiredValidationMessage key={label} label={label} />\n      ),\n    fieldsAndLabels\n  );\n  const isRequiredErrors = filter((res) => Boolean(res), mappedFieldAndLabels);\n  const errors = [...isRequiredErrors];\n  return errors;\n};\n","import moment from \"moment\";\nimport times from \"lodash/times\";\nimport map from \"lodash/fp/map\";\n\nexport interface IGetRentReciptInfo {\n  month: string;\n  fromDt: string;\n  toDt: string;\n}\n\nexport const getRentReceiptInfo = (\n  fromDt: string,\n  numberOfMonths: string\n): IGetRentReciptInfo[] => {\n  const getFromDt = (dt: string, idx: number) =>\n    moment(dt).add(idx, \"months\").startOf(\"day\");\n  const results = map((idx) => {\n    const $fromDtStartOfDay = getFromDt(fromDt, idx);\n    const daysInMonth = $fromDtStartOfDay.daysInMonth();\n    return {\n      month: $fromDtStartOfDay.format(\"MMMM YYYY\"),\n      fromDt: $fromDtStartOfDay.format(\"DD-MMM-YYYY\"),\n      toDt: $fromDtStartOfDay\n        .add(daysInMonth, \"days\")\n        .subtract(1, \"day\")\n        .format(\"DD-MMM-YYYY\"),\n    };\n  }, times(parseInt(numberOfMonths)));\n  return results;\n};\n","import React, { useMemo } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const Strong = ({ t }: { t: string }) => <strong>{t}</strong>;\n\nexport interface IRentReceiptProps {\n  amount: string;\n  tenantName: string;\n  address: string;\n  month: string;\n  fromDt: string;\n  toDt: string;\n  landlordName: string;\n  panNo: string;\n  printOnly: boolean;\n  pageBreakAfter: boolean;\n  includesMaintenance: boolean;\n}\n\n/**\n * The rent receipt\n */\nexport const RentReceipt: React.FC<IRentReceiptProps> = ({\n  amount,\n  tenantName,\n  address,\n  month,\n  fromDt,\n  toDt,\n  landlordName,\n  panNo,\n  printOnly,\n  pageBreakAfter,\n  includesMaintenance,\n}) => {\n  const { receiptNumber, wrapperClasses } = useMemo(\n    () => ({\n      receiptNumber: uuid().substr(-12),\n      wrapperClasses: `overflow-auto d-print-block mt-2 ${\n        pageBreakAfter ? \"page-break-after\" : \"\"\n      } ${printOnly ? \"d-none\" : \"\"}`.trim(),\n    }),\n    [pageBreakAfter, printOnly]\n  );\n  return (\n    <div className={wrapperClasses}>\n      <div className=\"border-2 border p-2 m-1 border-secondary\">\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <h2>RENT RECEIPT</h2>\n            <h6>{month}</h6>\n          </div>\n          <div className=\"text-end\">\n            <div>\n              <Strong t=\"Date: \" />\n              {toDt}\n            </div>\n            <div>\n              <Strong t=\"Receipt No: \" /> {receiptNumber}{\" \"}\n            </div>\n          </div>\n        </div>\n        <div className=\"my-4\">\n          Received sum of <Strong t={`₹ ${amount} `} />\n          from <Strong t={tenantName} /> towards the rent{\" \"}\n          {includesMaintenance ? \"and maintenance\" : \"\"} of property located at{\" \"}\n          <Strong t={address} /> for the period from <Strong t={fromDt} /> to{\" \"}\n          <Strong t={toDt} />.\n        </div>\n        <div className=\"mb-4\">\n          <strong>{landlordName} (Landlord)</strong>\n        </div>{\" \"}\n        <div>\n          {\" \"}\n          <strong>PAN No:</strong> {panNo}\n        </div>\n      </div>\n    </div>\n  );\n};\n","// enum SVGIconsEnum {\n//   PrinterFill = \"printer-fill\",\n// }\n\nexport type SVGIconType =\n  | \"printer-fill\"\n  | \"share-fill\"\n  | \"exclamation-octagon-fill\";\n\nexport const svgIcons: SVGIconType[] = [\n  \"printer-fill\",\n  \"share-fill\",\n  \"exclamation-octagon-fill\",\n];\n\nexport interface ISVGIconProps {\n  type: SVGIconType;\n  className?: string;\n}\n\nexport const SVGIcon = ({ type, className }: ISVGIconProps) => {\n  switch (type) {\n    case \"exclamation-octagon-fill\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          className={`bi bi-exclamation-octagon-fill ${className}`}\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\" />\n        </svg>\n      );\n    case \"printer-fill\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          className={`bi bi-printer-fill ${className}`}\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M5 1a2 2 0 0 0-2 2v1h10V3a2 2 0 0 0-2-2H5zm6 8H5a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1z\" />\n          <path d=\"M0 7a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-1v-2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2H2a2 2 0 0 1-2-2V7zm2.5 1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1z\" />\n        </svg>\n      );\n\n    case \"share-fill\":\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"16\"\n          height=\"16\"\n          fill=\"currentColor\"\n          className={`bi bi-share-fill ${className}`}\n          viewBox=\"0 0 16 16\"\n        >\n          <path d=\"M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5z\" />\n        </svg>\n      );\n\n    default:\n      return null;\n  }\n};\n","import { useState, useCallback, useMemo } from \"react\";\nimport { IRentReceiptProps } from \"../RentReceipt\";\nimport {\n  ReceiptFormData,\n  RentReceiptFormWithValidation,\n} from \"../RentReceiptForm\";\nimport { getRentReceiptInfo } from \"../logic/getRentReceiptInfo\";\nimport { RentReceipt } from \"../RentReceipt\";\nimport { SVGIcon } from \"../atoms/Icon\";\nimport \"./styles.css\";\n\nexport const RentReceiptPrinterApp = () => {\n  const [{ rentReceiptFormData, hasPrintFeature }, setState] = useState<{\n    rentReceiptsInfo?: IRentReceiptProps;\n    rentReceiptFormData?: ReceiptFormData;\n    hasPrintFeature: boolean;\n  }>({\n    rentReceiptsInfo: undefined,\n    rentReceiptFormData: undefined,\n    hasPrintFeature: Boolean(window.print),\n  });\n\n  const onChangeData = useCallback((formData: ReceiptFormData) => {\n    setState((prevState) => ({\n      ...prevState,\n      rentReceiptFormData: formData,\n    }));\n  }, []);\n\n  const parsedRentReceiptInfo = useMemo(\n    () =>\n      rentReceiptFormData &&\n      getRentReceiptInfo(\n        rentReceiptFormData.fromDate,\n        rentReceiptFormData.noOfMonths\n      ),\n    [rentReceiptFormData]\n  );\n\n  const rentReceipts = useMemo<JSX.Element[] | null | boolean[]>(() => {\n    return parsedRentReceiptInfo && rentReceiptFormData\n      ? parsedRentReceiptInfo.map((rentReceiptInfo, idx) => {\n          const rentReceiptProps: IRentReceiptProps = {\n            address: rentReceiptFormData.address,\n            amount: Number(rentReceiptFormData.rentAmount).toLocaleString(),\n            landlordName: rentReceiptFormData.landlordName,\n            tenantName: rentReceiptFormData.tenantName,\n            pageBreakAfter:\n              (idx + 1) % 3 === 0 && parsedRentReceiptInfo.length - idx > 3,\n            printOnly: true,\n            toDt: rentReceiptInfo.toDt,\n            fromDt: rentReceiptInfo.fromDt,\n            month: rentReceiptInfo.month,\n            panNo: rentReceiptFormData.landlordPan,\n            includesMaintenance: rentReceiptFormData.includesMaintenance,\n          };\n          return (\n            <RentReceipt key={rentReceiptInfo.month} {...rentReceiptProps} />\n          );\n        })\n      : null;\n  }, [parsedRentReceiptInfo, rentReceiptFormData]);\n\n  const handleClickPrint = useCallback(() => {\n    window.print();\n  }, []);\n\n  if (!hasPrintFeature) {\n    return (\n      <div className=\"container my-2\">\n        <div className=\"alert alert-warning d-flex align-items-center\">\n          <SVGIcon type=\"exclamation-octagon-fill\" className=\"me-2\" />\n          <div>Your system doesn't have print feature.</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row  justify-content-center\">\n          <div className=\"col-12 col-md-8 col-lg-6 col-xl-5 col-xxl-5\">\n            <RentReceiptFormWithValidation onChange={onChangeData} />\n            <button\n              className=\"btn btn-success d-print-none\"\n              onClick={handleClickPrint}\n              disabled={!rentReceipts}\n            >\n              <span className=\"d-inline-flex align-items-center\">\n                <SVGIcon type=\"printer-fill\" className=\"me-1\" />\n                Print\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n      {rentReceipts}\n    </>\n  );\n};\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap\";\nimport { RentReceiptPrinterApp } from \"./stories/RentReceiptPrinterApp\";\n\nconst App = () => <RentReceiptPrinterApp />;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}